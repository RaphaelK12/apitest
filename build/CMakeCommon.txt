
set( apitest_BIN_DIR ${apitest_SOURCE_DIR}/bin )
set( apitest_MEDIA_DIR ${apitest_BIN_DIR}/Media )
set( apitest_SHADER_DIR ${apitest_BIN_DIR}/Shader )

set( SDL_INCLUDE_DIR "${apitest_SOURCE_DIR}/thirdparty/SDL2-2.0.1/include" )

set( apitest_WITH_D3D11 0 )
set( apitest_WITH_D3D12 0 )

if( WIN32 )
	set( apitest_WITH_D3D11 1 ) 
	set( apitest_WITH_D3D12 1 )
endif( WIN32 )

set_option(DISABLE_D3D12 "Disable D3D12 Renderer" ${WIN32})
if(DISABLE_D3D12)
	set( apitest_WITH_D3D12 0 )
endif(DISABLE_D3D12)

if( MSVC )
    set( SDL_LIBRARY_DIR "${CMAKE_BINARY_DIR}/thirdparty/SDL2-2.0.1/\$(Configuration)" )

    set( CMAKE_CXX_FLAGS "/WX- /W3 /MP /GR /EHa /arch:SSE2 /D _WIN32=1 /D WITH_D3D11=${apitest_WITH_D3D11} /D WITH_D3D12=${apitest_WITH_D3D12}" )
    set( CMAKE_CXX_FLAGS_DEBUG "/ZI /Od /D _DEBUG=1" )
    set( CMAKE_CXX_FLAGS_RELEASE "/Zi /O2 /D NDEBUG=1" )

    set( CMAKE_EXE_LINKER_FLAGS "/DEBUG" )
    set( CMAKE_SHARED_LINKER_FLAGS "/DEBUG" )
    set( CMAKE_MODULE_LINKER_FLAGS "/DEBUG" )
elseif( APPLE )
    set( SDL_LIBRARY_DIR "${CMAKE_BINARY_DIR}/thirdparty/SDL2-2.0.1/" )

    if( NOT CMAKE_BUILD_TYPE )
      set( CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build, options are: None Debug Release" FORCE )
    endif()
    
    set( CMAKE_CXX_FLAGS "-std=c++11 -g ${CMAKE_CXX_FLAGS} -DPOSIX=1 -D_OSX=1 -DNDEBUG=1 -DWITH_D3D11=${apitest_WITH_D3D11}" )
    set( CMAKE_CXX_FLAGS_DEBUG "-O0 -D_DEBUG=1" )
    set( CMAKE_CXX_FLAGS_RELEASE "-O3" )

    set( CMAKE_EXE_LINKER_FLAGS "-g" )
    set( CMAKE_SHARED_LINKER_FLAGS "-g" )
    set( CMAKE_MODULE_LINKER_FLAGS "-g" )
else()
    set( SDL_LIBRARY_DIR "${CMAKE_BINARY_DIR}/thirdparty/SDL2-2.0.1/" )

    if( NOT CMAKE_BUILD_TYPE )
      set( CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build, options are: None Debug Release" FORCE )
    endif()

    set( CMAKE_CXX_FLAGS "-std=c++11 -g ${CMAKE_CXX_FLAGS} -DPOSIX=1 -DLINUX=1 -DNDEBUG=1 -DWITH_D3D11=${apitest_WITH_D3D11}" )
    set( CMAKE_CXX_FLAGS_DEBUG "-O0 -D_DEBUG=1" )
    set( CMAKE_CXX_FLAGS_RELEASE "-O3" )

    set( CMAKE_EXE_LINKER_FLAGS "-g" )
    set( CMAKE_SHARED_LINKER_FLAGS "-g" )
    set( CMAKE_MODULE_LINKER_FLAGS "-g" )
endif( MSVC )

set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${apitest_BIN_DIR} )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${apitest_BIN_DIR} )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${apitest_BIN_DIR} )


# http://stackoverflow.com/questions/148570/using-pre-compiled-headers-with-cmake
macro( add_msvc_precompiled_header _precompiledHeader _precompiledSource _sourcesVar )
  if( MSVC )
    get_filename_component( PrecompiledBasename ${_precompiledHeader} NAME_WE)
    set( PrecompiledBinary "${CMAKE_CFG_INTDIR}/${PrecompiledBasename}.pch" )
    set( Sources ${${_sourcesVar}})

    set_source_files_properties( ${_precompiledSource}
                                 PROPERTIES COMPILE_FLAGS "/Yc\"${_precompiledHeader}\" /Fp\"${PrecompiledBinary}\""
                                            OBJECT_OUTPUTS "${PrecompiledBinary}" )

    set_source_files_properties( ${Sources}
                                 PROPERTIES COMPILE_FLAGS "/Yu\"${_precompiledHeader}\" /FI\"${_precompiledHeader}\" /Fp\"${PrecompiledBinary}\""
                                            OBJECT_DEPENDS "${PrecompiledBinary}" )
    # Add precompiled header to _sourcesVar
    LIST( APPEND ${_sourcesVar} ${_precompiledSource} )
  endif( MSVC )
endmacro( add_msvc_precompiled_header )


include_directories( ${apitest_SOURCE_DIR}/src )
file( GLOB_RECURSE HDRS *.h )
